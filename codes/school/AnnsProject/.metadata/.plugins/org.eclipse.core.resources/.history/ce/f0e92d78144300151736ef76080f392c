package com.kashu.controller;

import java.sql.Timestamp;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.kashu.domain.Category;
import com.kashu.domain.Product;
import com.kashu.property.editors.CategoryEditor;
import com.kashu.service.CategoryService;
import com.kashu.service.ProductService;
import com.kashu.utility.RandomUtil;
import com.kashu.validator.ProductValidator;

@Controller
public class ProductController {
	
	@Autowired
	private ProductValidator productValidator;
	
	@Autowired
	private CategoryService categoryService;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private RandomUtil randomUtil;
	
	@InitBinder
	private void initBinder(WebDataBinder binder) {
		//這兩行沒寫的話，不能把表單的生日轉成Date物件
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
		//註冊自定義的CategoryEditor
		binder.registerCustomEditor(Category.class,new CategoryEditor());
		//設定Product物件的校驗器
		binder.setValidator(productValidator);
	}
	
	//準備註冊用的Product的空白模型
	@ModelAttribute("product")
	public Product initModel(){
		Product product = new Product();
		product.setTitle("");
		product.setPrice(0);
		product.setUnit("個");
		return product;
	}
	
	//準備分類Categories的map物件
	@ModelAttribute("categoriesMap")
	public Map initCategories(){
		List<Category> categories = categoryService.findAll();
		Map categoriesMap = new HashMap<String,String>();
		for(Category c : categories){
			System.out.println(c.getId() + " : " + c.getName());
			categoriesMap.put(c.getId(), c.getName());
		}
		return categoriesMap;
	}
	
	@RequestMapping(value="/admin/product/new ",method=RequestMethod.GET)
	public String addForm(Model model){
		return "product/new";
	}
	
	@RequestMapping(value="/admin/product/new ",method=RequestMethod.POST)
	public String addProduct(@ModelAttribute @Valid Product product,BindingResult result,Model model){
		String viewName = "product/new_success";
		if(result.hasErrors()){
			viewName = "product/new";
		}else{
			//試著將Product寫入資料庫
			System.out.println("product.title=" + product.getTitle());
			System.out.println("product.price=" + product.getPrice());
			System.out.println("product.enabled=" + product.getEnabled());
			System.out.println("product.unit=" + product.getUnit());
			System.out.println("product.category.id=" + product.getCategory().getId());
			Product p = productService.insert(product);
			if(p.getId()==null){
				model.addAttribute("error_message_db", "新增失敗，無法寫入產品到資料庫");
				viewName = "product/new";
			}else{
				//寫入成功
				model.addAttribute("product", p);
			}
		}
		
		System.out.println("addProduct() was called");
		return viewName;
	}
	
	//產生10筆隨機的產品資料，新增至資料庫
	@RequestMapping(value="/admin/product/random")
	public String random(Model model){
		
		List<Product> products = new ArrayList<Product>();
		Product p;
		Category c;
		for(int i=0;i<10;i++){
			p = new Product();
			p.setTitle(randomUtil.get_a_chinese_word(randomUtil.get_a_number(6, 10)));
			p.setUnit(randomUtil.get_a_chinese_word(1));
			p.setPrice(randomUtil.get_a_number(100, 1000));
			p.setEnabled(false);
			switch(randomUtil.get_a_number(1, 3)){
				case 1:
					break;
					
					p.setCategory(c);
				case 2:
					break;
				case 3:
					break;
			}
		}
		
		Date endDate = new Date(Timestamp.valueOf("2015-12-31 23:59:59").getTime());
		//List<Date> dateList = randomUtil.get_dateList(startDate, endDate, 10);
		List<Integer> intList = randomUtil.get_IntegerList(1, 100, 20);
		//String chinese_words = randomUtil.readTxtFile();
		List<String> wordList = randomUtil.get_a_string_list(6, 10);
		//model.addAttribute("dateList", dateList);
		model.addAttribute("intList", intList);
		//model.addAttribute("chinese_words", chinese_words);
		model.addAttribute("wordList", wordList);
		return "product/random";
	}
	
	@RequestMapping(value="/admin/product/delete")
	public String delete(@RequestParam(value="id",required = false) Long id,Model model){
		if(productService.delete(id)){
			model.addAttribute("product_id", id);
			return "product/delete_success";
		}
		
		return "product/delete_failed";
	}
	
}
