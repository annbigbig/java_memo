package com.kashu.repository;

import java.sql.Types;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.kashu.domain.Product;
import com.kashu.exception.InsertFailedException;
import com.kashu.exception.DeleteFailedException;

@Repository("productRepository")
public class ProductRepositoryJdbcImpl implements ProductRepository {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public Product insert(Product product) {
		Product result = null;
		PreparedStatementCreatorFactory psCreatorFactory = new PreparedStatementCreatorFactory(
				"INSERT INTO TB_PRODUCTS(title,price,unit,enabled,category_id) VALUES(?,?,?,?,?)",
				new int[] { Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.BOOLEAN, Types.BIGINT });
		KeyHolder keyHolder = new GeneratedKeyHolder();
		int count = jdbcTemplate.update(
				psCreatorFactory.newPreparedStatementCreator(
						new Object[] {product.getTitle(),product.getPrice(),product.getUnit(),product.getEnabled(),product.getCategory().getId()})
						,keyHolder);
		if (count == 1){
			product.setId(keyHolder.getKey().longValue());
			result = product;
		}
		return result;
	}

	@Override
	public Product update(Product product) {
		
		return null;
	}

	@Override
	public Boolean delete(Long id) {
		Boolean result = false;
		int count = jdbcTemplate.update("DELETE FROM TB_PRODUCTS where id = ?",id);
		if (count == 1){
			result = true;
		}
		return result;
	}

	@Override
	public List<Product> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Product> find(Map<String, Object> searchParams) {
		String searchColumn = searchParams.get("searchColumn").toString();
		String sql = "SELECT * FROM TB_PRODUCTS WHERE " + searchColumn + " LIKE '%?%'"; 
		PreparedStatementCreatorFactory psCreatorFactory = new PreparedStatementCreatorFactory(
				"SELECT * FROM TB_PRODUCTS WHERE locked = ?",new int[] { Types.BOOLEAN });
		return null;
	}

	@Override
	public List<Product> find(Map<String, Object> searchParams,
			Map<String, Object> orderParams) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Product> find(Map<String, Object> searchParams,
			Map<String, Object> orderParams, Map<String, Object> pageParams) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public String getWhere(Map<String,Object> searchParams){
		String where = "";
		if(searchParams.containsKey("title")){
			where = " WHERE title LIKE '%" + searchParams.get("title").toString() + "%'";
		}
		return where;
	}
	
	public String getOrder(Map<String,Object> orderParams){
		String order = "";
		if(orderParams.containsKey("orderColumn")&&(orderParams.containsKey("orderType"))){
			order = " ORDER BY " + orderParams.get("orderColumn").toString() + " " + orderParams.get("orderType");
		}
		return order;
	}
	
	public String getLimit(Map<String,Object> pageParams){
		String limit = "";
		if(pageParams.containsKey("pageNumber")&&(pageParams.containsKey("pageSize"))){
			Integer pageNumber = Integer.parseInt(pageParams.get("pageNumber").toString());
			Integer pageSize = Integer.parseInt(pageParams.get("pageSize").toString());
			Integer index = (pageNumber-1) * pageSize;
			limit = " LIMIT " + index + "," + pageSize;
		}
		return limit;
	}

}
